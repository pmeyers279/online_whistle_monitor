#!/usr/bin/env python
import markup
import optparse
from gwpy.segments import (Segment, DataQualityFlag)


def parse_command_line():
    """
    parse command line
    """
    parser = optparse.OptionParser()
    parser.add_option(
        "-o", "--ifo", help="interferometer, default is L1", dest="ifo",
        type=str, default="L1")
    parser.add_option(
        "-s", help="start time", dest="st", type=int, default=None)
    parser.add_option(
        "-e", help="end time", dest="et", type=int, default=None)
    parser.add_option(
        "-c", "--channel-list", help="channel for which user wants histogram.",
        dest="list", type=str, default="channles.txt")
    parser.add_option(
        "--flag", help="flag (without ifo tag)", type=str, default='DMT-ANALYSIS_READY:1')
    params, args = parser.parse_args()
    return params



def make_html_page(segs, st, et, ifo, list='channels.txt'):
    f = open(list,'r')
    channels = []
    for line in f:
	channels.append(line.rstrip())

    page = markup.page()
    page.init(title="VCO Histogram to Search for Whistles in %d-%d" % (int(segs[0][0]), int(segs[-1][1])))
    page.div()
    for channel in channels:
        channel = channel.replace('-','_')
        channel = channel.replace(':', '-')
	page.div()
        page.h3("%s:%s Omicron triggers vs. VCO Histogram" % (ifo,channel), align='center')
        for seg in segs:
            page.div()
            page.img(src="%s-%s_VCO-HIST-%d-%d.png" %
                     (ifo, channel, int(seg[0]), int(seg[1]) - int(seg[0])), align='center')
            page.div.close()
	page.div.close()
    page.div.close()
    outpage = '%d-%d.html' % (params.st, params.et)
    f = open(outpage,'w')
    print >> f, page
    f.close()

params = parse_command_line()
flag = '%s:%s' % (params.ifo, params.flag)
if not params.st and params.et:
    raise ValueError('need to specify start and end times')
segs = DataQualityFlag.query_dqsegdb(
    flag, params.st, params.et, url='https://segments.ligo.org')

make_html_page(segs, params.st, params.et, params.ifo, list=params.list)
